{"version":3,"sources":["components/DrumContainer.js","App.js","serviceWorker.js","index.js"],"names":["DrumContainer","props","check","setState","triggerBand","state","handleClick","name","key","myref","forEach","ele","id","play","displayed","soundControls","triggerSound","sounds","bankOne","keyCode","keyTrigger","url","bankTwo","this","map","indx","tabIndex","className","onClick","src","aria-label","ref","input","name2","empty","document","addEventListener","e","toUpperCase","getAttribute","htmlFor","onChange","type","role","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.73dbaced.chunk.js","sourcesContent":["import React , { Component } from 'react'\r\n// import '../../../node_modules/bootstrap/dist/css/bootstrap.css';\r\n\r\nclass DrumContainer extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.myref= [];\r\n        this.state ={\r\n            triggerSound : true ,\r\n            triggerBand: false , \r\n            \r\n            displayed : '' ,\r\n            sounds:{\r\n                bankOne : [{\r\n                    keyCode: 81,\r\n                    keyTrigger: 'Q',\r\n                    id: 'Heater-1',\r\n                    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\r\n                  }, {\r\n                    keyCode: 87,\r\n                    keyTrigger: 'W',\r\n                    id: 'Heater-2',\r\n                    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\r\n                  }, {\r\n                    keyCode: 69,\r\n                    keyTrigger: 'E',\r\n                    id: 'Heater-3',\r\n                    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\r\n                  }, {\r\n                    keyCode: 65,\r\n                    keyTrigger: 'A',\r\n                    id: 'Heater-4',\r\n                    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\r\n                  }, {\r\n                    keyCode: 83,\r\n                    keyTrigger: 'S',\r\n                    id: 'Clap',\r\n                    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\r\n                  }, {\r\n                    keyCode: 68,\r\n                    keyTrigger: 'D',\r\n                    id: 'Open-HH',\r\n                    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\r\n                  }, {\r\n                    keyCode: 90,\r\n                    keyTrigger: 'Z',\r\n                    id: \"Kick-n'-Hat\",\r\n                    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\r\n                  }, {\r\n                    keyCode: 88,\r\n                    keyTrigger: 'X',\r\n                    id: 'Kick',\r\n                    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\r\n                  }, {\r\n                    keyCode: 67,\r\n                    keyTrigger: 'C',\r\n                    id: 'Closed-HH',\r\n                    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\r\n                  },\r\n                ] ,\r\n                \r\n                 bankTwo : [{\r\n                  keyCode: 81,\r\n                  keyTrigger: 'Q',\r\n                  id: 'Chord-1',\r\n                  url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\r\n                }, {\r\n                  keyCode: 87,\r\n                  keyTrigger: 'W',\r\n                  id: 'Chord-2',\r\n                  url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'\r\n                }, {\r\n                  keyCode: 69,\r\n                  keyTrigger: 'E',\r\n                  id: 'Chord-3',\r\n                  url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'\r\n                }, {\r\n                  keyCode: 65,\r\n                  keyTrigger: 'A',\r\n                  id: 'Shaker',\r\n                  url: 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'\r\n                }, {\r\n                  keyCode: 83,\r\n                  keyTrigger: 'S',\r\n                  id: 'Open-HH',\r\n                  url: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'\r\n                }, {\r\n                  keyCode: 68,\r\n                  keyTrigger: 'D',\r\n                  id: 'Closed-HH',\r\n                  url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n                }, {\r\n                  keyCode: 90,\r\n                  keyTrigger: 'Z',\r\n                  id: 'Punchy-Kick',\r\n                  url: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'\r\n                }, {\r\n                  keyCode: 88,\r\n                  keyTrigger: 'X',\r\n                  id: 'Side-Stick',\r\n                  url: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'\r\n                }, {\r\n                  keyCode: 67,\r\n                  keyTrigger: 'C',\r\n                  id: 'Snare',\r\n                  url: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'\r\n                }]\r\n            }\r\n        }\r\n\r\n    }\r\n    check = ()=>{\r\n      this.setState({\r\n        triggerBand : !this.state.triggerBand\r\n      })\r\n    }\r\n    handleClick = (name , key)=>{\r\n        this.myref.forEach(ele=>{\r\n          if(key === ele.id){\r\n            ele.play();\r\n          }\r\n        })\r\n\r\n\r\n        this.setState({\r\n            displayed : name\r\n        })\r\n       }\r\n       soundControls = ()=>{\r\n         this.setState({\r\n           triggerSound : !this.state.triggerSound\r\n         })\r\n       }\r\n    render (){\r\n        let name = this.state.sounds.bankOne.map((ele,indx)=>{\r\n\r\n          return (\r\n            <button tabIndex=\"0\" className=\"drum-pad\" onClick={()=>this.handleClick(ele.id , ele.keyTrigger)} key={indx}>\r\n                    {ele.keyTrigger}\r\n                    <audio src={ele.url} className=\"clip\" aria-label={`press the ${ele.keyTrigger} sound is ON`} name={ele.id} ref={(input)=> this.myref[indx] = input} id={ele.keyTrigger}/>\r\n            </button>\r\n            )\r\n          })\r\n\r\n        let name2 = this.state.sounds.bankTwo.map((ele,indx)=>{\r\n\r\n          return (\r\n            <button tabIndex=\"0\" className=\"drum-pad\" onClick={()=>this.handleClick(ele.id , ele.keyTrigger)} key={indx}>\r\n                    {ele.keyTrigger}\r\n                    <audio src={ele.url} className=\"clip\" aria-label={`press the ${ele.keyTrigger} sound is ON`} name={ele.id} ref={(input)=> this.myref[indx] = input} id={ele.keyTrigger}/>\r\n            </button>\r\n            )\r\n          })\r\n\r\n        let empty = this.state.sounds.bankTwo.map((ele,indx)=>{\r\n\r\n          return (\r\n            <button className=\"drum-pad\" key={indx} tabIndex=\"0\">\r\n                    {ele.keyTrigger}\r\n                    <audio src={ele.url} className=\"clip\" aria-label={`press the ${ele.keyTrigger} sound is Off`} name=\"\" ref={(input)=> this.myref[indx] = input} id={ele.keyTrigger}/>\r\n            </button>\r\n            )\r\n          })\r\n      \r\n        \r\n        if(this.state.triggerSound){\r\n          \r\n          document.addEventListener(\"keyup\" , (e)=>{\r\n\r\n              this.myref.forEach(ele=>{\r\n                if(e.key.toUpperCase() === ele.id){\r\n                   ele.play(); \r\n                   this.setState({\r\n                     displayed : ele.getAttribute(\"name\")\r\n                  })\r\n                }\r\n              })\r\n          }\r\n        )\r\n        \r\n        }\r\n\r\n        return(\r\n            <main id=\"drum-machine\" className=\"d-flex main-split\">\r\n                <section className=\"button-group\" aria-label=\"drum pad\">\r\n                  {this.state.triggerSound ? this.state.triggerBand ? name : name2 : empty}\r\n                </section>\r\n                <section className=\"other-Content\" aria-label=\"drum pad controlls and display name\">\r\n                  <p className=\"display-drumpad-content\" tabIndex=\"0\" id=\"display\">\r\n                    {this.state.displayed ? this.state.displayed : \"Sound\"}\r\n                  </p>\r\n                  <div aria-label=\"controls for the Drum machine\" className=\"d-flex btngroup\">\r\n                    <div className=\"controls\" aria-label=\"controls for the sound\">\r\n                      <label htmlFor=\"sound\">{this.state.triggerSound ? \"Sound ON\" : \"Sound OFF\"}</label>\r\n                      <input id=\"sound\" onChange={this.soundControls}  type=\"checkbox\" role=\"switch\" aria-label={this.state.triggerSound ? \"press to turn sound OFF\" : \"press to turn sound ON\"} className=\"switch\"/>\r\n                    </div>\r\n                    <div className=\"controls\"  aria-label=\"controls for the machine type\" name=\"label in the right\">\r\n                      <label htmlFor=\"machine\">{this.state.triggerBand ? \"Machine TWO\" : \"Machine ONE\"}</label>\r\n                      <input type=\"checkbox\" id=\"machine\" onChange={this.check} role=\"switch\" aria-label={\"press to change the music machine\"} name=\"\" className=\"switch\"/>                      \r\n                    </div>\r\n                  </div>\r\n                </section>\r\n            </main>\r\n        )\r\n    }\r\n} \r\nexport default DrumContainer ; \r\n","import React from 'react';\nimport './App.css';\nimport DrumContainer from './components/DrumContainer.js'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"center\">\n        <h1 className=\"headCenter\" aria-label={`this project is made for freeCodeCamp`}>Drum Machine</h1>\n      </header>\n      <DrumContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}